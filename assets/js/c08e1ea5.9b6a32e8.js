"use strict";(self.webpackChunkspringwolf_docs=self.webpackChunkspringwolf_docs||[]).push([[475],{3905:(e,a,n)=>{n.d(a,{Zo:()=>c,kt:()=>d});var t=n(7294);function o(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function i(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);a&&(t=t.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,t)}return n}function l(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?i(Object(n),!0).forEach((function(a){o(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function r(e,a){if(null==e)return{};var n,t,o=function(e,a){if(null==e)return{};var n,t,o={},i=Object.keys(e);for(t=0;t<i.length;t++)n=i[t],a.indexOf(n)>=0||(o[n]=e[n]);return o}(e,a);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)n=i[t],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=t.createContext({}),p=function(e){var a=t.useContext(s),n=a;return e&&(n="function"==typeof e?e(a):l(l({},a),e)),n},c=function(e){var a=p(e.components);return t.createElement(s.Provider,{value:a},e.children)},m={inlineCode:"code",wrapper:function(e){var a=e.children;return t.createElement(t.Fragment,{},a)}},u=t.forwardRef((function(e,a){var n=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,c=r(e,["components","mdxType","originalType","parentName"]),u=p(n),d=o,h=u["".concat(s,".").concat(d)]||u[d]||m[d]||i;return n?t.createElement(h,l(l({ref:a},c),{},{components:n})):t.createElement(h,l({ref:a},c))}));function d(e,a){var n=arguments,o=a&&a.mdxType;if("string"==typeof e||o){var i=n.length,l=new Array(i);l[0]=u;var r={};for(var s in a)hasOwnProperty.call(a,s)&&(r[s]=a[s]);r.originalType=e,r.mdxType="string"==typeof e?e:o,l[1]=r;for(var p=2;p<i;p++)l[p]=n[p];return t.createElement.apply(null,l)}return t.createElement.apply(null,n)}u.displayName="MDXCreateElement"},1622:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>s,contentTitle:()=>l,default:()=>m,frontMatter:()=>i,metadata:()=>r,toc:()=>p});var t=n(7462),o=(n(7294),n(3905));const i={sidebar_position:5},l="Manually Documenting Consumers",r={unversionedId:"manually-documenting-consumers",id:"manually-documenting-consumers",title:"Manually Documenting Consumers",description:"Sometimes projects are configured in a way that makes Springwolf unable to automatically locate consumers, producers are defined imperatively (They don't have the @KafkaListener or @RabbitListener annotations on the consuming methods).",source:"@site/docs/manually-documenting-consumers.md",sourceDirName:".",slug:"/manually-documenting-consumers",permalink:"/docs/manually-documenting-consumers",draft:!1,editUrl:"https://github.com/springwolf/springwolf.github.io/edit/master/docs/manually-documenting-consumers.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Documenting Producers",permalink:"/docs/documenting-producers"},next:{title:"Supported Protocols",permalink:"/docs/supported-protocols"}},s={},p=[{value:"<code>ConsumerData</code>",id:"consumerdata",level:2},{value:"Channel Name",id:"channel-name",level:3},{value:"Description",id:"description",level:3},{value:"Binding",id:"binding",level:3},{value:"Payload Type",id:"payload-type",level:3},{value:"Header",id:"header",level:3},{value:"<code>AmqpConsumerData</code>",id:"amqpconsumerdata",level:2},{value:"Queue Name (Channel Name)",id:"queue-name-channel-name",level:3},{value:"Description",id:"description-1",level:3},{value:"Exchange Name",id:"exchange-name",level:3},{value:"Routing Key",id:"routing-key",level:3},{value:"Payload Type",id:"payload-type-1",level:3},{value:"Example",id:"example",level:3},{value:"<code>KafkaConsumerData</code>",id:"kafkaconsumerdata",level:2},{value:"Topic Name (Channel Name)",id:"topic-name-channel-name",level:3},{value:"Description",id:"description-2",level:3},{value:"Payload Type",id:"payload-type-2",level:3},{value:"Headers",id:"headers",level:3},{value:"Example",id:"example-1",level:3}],c={toc:p};function m(e){let{components:a,...n}=e;return(0,o.kt)("wrapper",(0,t.Z)({},c,n,{components:a,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"manually-documenting-consumers"},"Manually Documenting Consumers"),(0,o.kt)("p",null,"Sometimes projects are configured in a way that makes Springwolf unable to automatically locate consumers, producers are defined imperatively (They don't have the ",(0,o.kt)("inlineCode",{parentName:"p"},"@KafkaListener")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"@RabbitListener")," annotations on the consuming methods)."),(0,o.kt)("p",null,"Because there is still immense value in documenting the consumers, Springwolf provides a way to explicitly add them to the generated document, by declaring them in the ",(0,o.kt)("inlineCode",{parentName:"p"},"AsyncApiDocket")," using the ",(0,o.kt)("inlineCode",{parentName:"p"},"ConsumerData")," object."),(0,o.kt)("h2",{id:"consumerdata"},(0,o.kt)("inlineCode",{parentName:"h2"},"ConsumerData")),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"Use specific ConsumerData types ",(0,o.kt)("inlineCode",{parentName:"p"},"AmqpConsumerData")," & ",(0,o.kt)("inlineCode",{parentName:"p"},"KafkaConsumerData")," for protocol specific attributes")),(0,o.kt)("p",null,"Below is an example of describing a Kafka consumer:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},'@Bean\npublic AsyncApiDocket asyncApiDocket() {\n\n    ConsumerData exampleConsumerData = ConsumerData.builder()\n            .channelName("example-consumer-topic")\n            .description("Optional. Customer uploaded an example payload")\n            .operationBinding(ImmutableMap.of("kafka", new KafkaOperationBinding()))\n            .payloadType(ExamplePayloadDto.class)\n            .headers(AsyncHeaders.NOT_USED)\n            .build();\n  \n    return AsyncApiDocket.builder()\n            .basePackage(...)\n            .info(...)\n            .server(...)\n            .consumer(exampleConsumerData)\n            .build();\n}\n')),(0,o.kt)("p",null,"Multiple consumers can be configured by calling the ",(0,o.kt)("inlineCode",{parentName:"p"},"consumer()")," method multiple times."),(0,o.kt)("h3",{id:"channel-name"},"Channel Name"),(0,o.kt)("p",null,"The channel name (or topic name in case of Kafka) - this is the name that will be used to subscribe to messages to by the UI."),(0,o.kt)("h3",{id:"description"},"Description"),(0,o.kt)("p",null,"Optional. The description allows for human-friendly text to verbosely explain the ",(0,o.kt)("em",{parentName:"p"},"message"),", like specific domain, what the topic is used for and which data it contains."),(0,o.kt)("h3",{id:"binding"},"Binding"),(0,o.kt)("p",null,"This property is used to discriminate the consumer's protocol and provide protocol-specific properties (see ",(0,o.kt)("a",{parentName:"p",href:"https://www.asyncapi.com/docs/specifications/v2.0.0#operationBindingsObject"},"Operation Binding Object"),")."),(0,o.kt)("h3",{id:"payload-type"},"Payload Type"),(0,o.kt)("p",null,"The class object of the payload that will be consumed from this channel."),(0,o.kt)("h3",{id:"header"},"Header"),(0,o.kt)("p",null,"Optional. The headers describing the metadata of the payload.\nBy default, ",(0,o.kt)("inlineCode",{parentName:"p"},"AsyncHeaders.NOT_DOCUMENTED")," is used to indicate that no explicit header documentation exists.\nUse ",(0,o.kt)("inlineCode",{parentName:"p"},"AsyncHeaders")," to add your custom headers, use ",(0,o.kt)("inlineCode",{parentName:"p"},"AsyncHeaders.NOT_USED")," if you do not use headers and ",(0,o.kt)("inlineCode",{parentName:"p"},"AsyncHeadersForCloudEventsBuilder")," if your events follow the CloudEvent specification."),(0,o.kt)("h2",{id:"amqpconsumerdata"},(0,o.kt)("inlineCode",{parentName:"h2"},"AmqpConsumerData")),(0,o.kt)("p",null,"The above Kafka ",(0,o.kt)("inlineCode",{parentName:"p"},"ConsumerData")," equivalent in ",(0,o.kt)("inlineCode",{parentName:"p"},"AmqpConsumerData"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},'    AmqpConsumerData exampleConsumer = AmqpConsumerData.amqpConsumerDataBuilder()\n        .queueName("example-consumer-channel")\n        .description("example-consumer-channel-description")\n        .exchangeName("example-topic-exchange")\n        .routingKey("example-topic-routing-key")\n        .payloadType(AnotherPayloadDto.class)\n        .build();\n')),(0,o.kt)("h3",{id:"queue-name-channel-name"},"Queue Name (Channel Name)"),(0,o.kt)("p",null,"The queue name that will be used to publish messages to by the UI."),(0,o.kt)("h3",{id:"description-1"},"Description"),(0,o.kt)("p",null,"Optional. The description allows for human-friendly text to verbosely explain the ",(0,o.kt)("em",{parentName:"p"},"message"),", like specific domain, what the topic is used for and which data it contains."),(0,o.kt)("h3",{id:"exchange-name"},"Exchange Name"),(0,o.kt)("p",null,"The exchange name that will be used to bind queues to."),(0,o.kt)("h3",{id:"routing-key"},"Routing Key"),(0,o.kt)("p",null,"The routing key used when publishing a message."),(0,o.kt)("h3",{id:"payload-type-1"},"Payload Type"),(0,o.kt)("p",null,"The class object of the payload that will be consumed from this channel."),(0,o.kt)("h3",{id:"example"},"Example"),(0,o.kt)("p",null,"See a full example ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/springwolf/springwolf-core/blob/master/springwolf-examples/springwolf-amqp-example/src/main/java/io/github/stavshamir/springwolf/example/configuration/AsyncApiConfiguration.java"},"here"),"."),(0,o.kt)("h2",{id:"kafkaconsumerdata"},(0,o.kt)("inlineCode",{parentName:"h2"},"KafkaConsumerData")),(0,o.kt)("p",null,"The above Kafka ",(0,o.kt)("inlineCode",{parentName:"p"},"ConsumerData")," simplifies to the following ",(0,o.kt)("inlineCode",{parentName:"p"},"KafkaConsumerData"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},'    KafkaConsumerData exampleConsumerData = KafkaConsumerData.kafkaConsumerDataBuilder()\n        .topicName("example-consumer-topic")\n        .description("Optional. Customer uploaded an example payload")\n        .payloadType(ExamplePayloadDto.class)\n        .headers(AsyncHeaders.NOT_USED)\n        .build();\n')),(0,o.kt)("h3",{id:"topic-name-channel-name"},"Topic Name (Channel Name)"),(0,o.kt)("p",null,"The topic name that will be used to publish messages to by the UI."),(0,o.kt)("h3",{id:"description-2"},"Description"),(0,o.kt)("p",null,"Optional. The description allows for human-friendly text to verbosely explain the ",(0,o.kt)("em",{parentName:"p"},"message"),", like specific domain, what the topic is used for and which data it contains."),(0,o.kt)("h3",{id:"payload-type-2"},"Payload Type"),(0,o.kt)("p",null,"The class object of the payload that will be consumed from this channel."),(0,o.kt)("h3",{id:"headers"},"Headers"),(0,o.kt)("p",null,"The Kafka headers describing the metadata of the payload, more details in the generic ConsumerData."),(0,o.kt)("p",null,"The Springwolf Kafka plugin comes with a special ",(0,o.kt)("inlineCode",{parentName:"p"},"AsyncHeadersForSpringKafkaBuilder")," to document the ",(0,o.kt)("inlineCode",{parentName:"p"},"__TypeId__")," header of the spring-kafka dependency."),(0,o.kt)("h3",{id:"example-1"},"Example"),(0,o.kt)("p",null,"See a full example ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/springwolf/springwolf-core/blob/master/springwolf-examples/springwolf-kafka-example/src/main/java/io/github/stavshamir/springwolf/example/configuration/AsyncApiConfiguration.java"},"here"),"."))}m.isMDXComponent=!0}}]);