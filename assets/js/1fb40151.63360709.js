"use strict";(self.webpackChunkspringwolf_docs=self.webpackChunkspringwolf_docs||[]).push([[847],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>h});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=r.createContext({}),c=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=c(e.components);return r.createElement(l.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=c(t),h=i,m=u["".concat(l,".").concat(h)]||u[h]||d[h]||a;return t?r.createElement(m,o(o({ref:n},p),{},{components:t})):r.createElement(m,o({ref:n},p))}));function h(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,o=new Array(a);o[0]=u;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:i,o[1]=s;for(var c=2;c<a;c++)o[c]=t[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},1542:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var r=t(7462),i=(t(7294),t(3905));const a={sidebar_position:70},o="Behind the scenes",s={unversionedId:"behind-the-scenes",id:"behind-the-scenes",title:"Behind the scenes",description:"The following paragraphs describe how springwolf works internally.",source:"@site/docs/behind-the-scenes.md",sourceDirName:".",slug:"/behind-the-scenes",permalink:"/docs/behind-the-scenes",draft:!1,editUrl:"https://github.com/springwolf/springwolf.github.io/edit/master/docs/behind-the-scenes.md",tags:[],version:"current",sidebarPosition:70,frontMatter:{sidebar_position:70},sidebar:"tutorialSidebar",previous:{title:"Documenting Schemas",permalink:"/docs/documenting-schemas"},next:{title:"Frequently Asked Questions",permalink:"/docs/faq"}},l={},c=[{value:"Big Picture",id:"big-picture",level:2},{value:"Plugins",id:"plugins",level:2},{value:"Scanners",id:"scanners",level:2},{value:"Building an example payload",id:"building-an-example-payload",level:2},{value:"ModelConverters",id:"modelconverters",level:3},{value:"Putting it all together",id:"putting-it-all-together",level:2}],p={toc:c};function d(e){let{components:n,...t}=e;return(0,i.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"behind-the-scenes"},"Behind the scenes"),(0,i.kt)("p",null,"The following paragraphs describe how springwolf works internally."),(0,i.kt)("h2",{id:"big-picture"},"Big Picture"),(0,i.kt)("p",null,"When the Spring Boot application is started, springwolf uses its scanners to find defined consumers and producers within the application.\nBased on the results, the channels/topics are extracted including payload type and merged together into an ",(0,i.kt)("a",{parentName:"p",href:"https://www.asyncapi.com/docs/reference/specification/v2.6.0"},"AsyncApi conform document"),"."),(0,i.kt)("p",null,"The AsyncApi document is accessible an endpoint.\nWhen the springwolf ui is opened, the browser fetches the document and renders it (see demo)."),(0,i.kt)("p",null,"When publishing is enabled, the user can publish a message through the ui to another endpoint.\nFrom there, springwolf forwards the message to the protocol specific producer."),(0,i.kt)("h2",{id:"plugins"},"Plugins"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"springwolf-core")," provides the base functionality to orchestrate the scanning and building of the AsyncApi document.\nThe different protocol (AMQP, Kafka) are supported through plugins.\nThese plugins are found through the Spring dependency injection functionality.\nWhen building own scanner plugins, your plugin will need to implement the ",(0,i.kt)("inlineCode",{parentName:"p"},"ChannelsScanner")," interface."),(0,i.kt)("h2",{id:"scanners"},"Scanners"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"springwolf-core")," runs all scanners and merges the found results together into one AsyncApi document.\nWhen the same channel/topic is found multiple times, it is merged as well."),(0,i.kt)("p",null,"The result is a ",(0,i.kt)("a",{parentName:"p",href:"https://www.asyncapi.com/docs/reference/specification/v2.6.0#channelItemObject"},(0,i.kt)("inlineCode",{parentName:"a"},"ChannelItem")),".\nThe ",(0,i.kt)("inlineCode",{parentName:"p"},"ChannelItem")," contains the ",(0,i.kt)("inlineCode",{parentName:"p"},"Message")," for the subscribe and/or publish operation."),(0,i.kt)("h2",{id:"building-an-example-payload"},"Building an example payload"),(0,i.kt)("p",null,"When the scanners scan and build the result, they also extract the payload type.\nThe payload is registered in the ",(0,i.kt)("inlineCode",{parentName:"p"},"SchemasService"),", which allows to split the ",(0,i.kt)("inlineCode",{parentName:"p"},"Message")," from the schema definition - within the AsyncApi doc a ",(0,i.kt)("inlineCode",{parentName:"p"},"$ref")," references is used."),(0,i.kt)("p",null,"Using ",(0,i.kt)("inlineCode",{parentName:"p"},"swagger-inflector")," any class can be converted into a OpenApi schema.\nThis is used to instantiate an Example object with default values and serialized into an example json for the AsyncApi document."),(0,i.kt)("p",null,"By using ",(0,i.kt)("inlineCode",{parentName:"p"},"swagger-inflector"),", all the ",(0,i.kt)("inlineCode",{parentName:"p"},"@Schema")," and other swagger annotations are supported as well as ",(0,i.kt)("inlineCode",{parentName:"p"},"@JsonProperty")," through the use of the objectmapper."),(0,i.kt)("h3",{id:"modelconverters"},"ModelConverters"),(0,i.kt)("p",null,"ModelConverters provide a way to improve documentation for classes, which cannot be modified, for example because they are part of an external library.\nThey follow the same plugin model."),(0,i.kt)("h2",{id:"putting-it-all-together"},"Putting it all together"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"AsyncApiService")," collects all the channels, schemas and general info and builds the AsyncApi document.\nThe controller access this services to serve the document to the ui."))}d.isMDXComponent=!0}}]);