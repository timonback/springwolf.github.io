"use strict";(self.webpackChunkspringwolf_docs=self.webpackChunkspringwolf_docs||[]).push([[757],{3905:(e,a,n)=>{n.d(a,{Zo:()=>s,kt:()=>m});var t=n(7294);function i(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function o(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);a&&(t=t.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,t)}return n}function r(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?o(Object(n),!0).forEach((function(a){i(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function l(e,a){if(null==e)return{};var n,t,i=function(e,a){if(null==e)return{};var n,t,i={},o=Object.keys(e);for(t=0;t<o.length;t++)n=o[t],a.indexOf(n)>=0||(i[n]=e[n]);return i}(e,a);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)n=o[t],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var p=t.createContext({}),d=function(e){var a=t.useContext(p),n=a;return e&&(n="function"==typeof e?e(a):r(r({},a),e)),n},s=function(e){var a=d(e.components);return t.createElement(p.Provider,{value:a},e.children)},c={inlineCode:"code",wrapper:function(e){var a=e.children;return t.createElement(t.Fragment,{},a)}},u=t.forwardRef((function(e,a){var n=e.components,i=e.mdxType,o=e.originalType,p=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),u=d(n),m=i,h=u["".concat(p,".").concat(m)]||u[m]||c[m]||o;return n?t.createElement(h,r(r({ref:a},s),{},{components:n})):t.createElement(h,r({ref:a},s))}));function m(e,a){var n=arguments,i=a&&a.mdxType;if("string"==typeof e||i){var o=n.length,r=new Array(o);r[0]=u;var l={};for(var p in a)hasOwnProperty.call(a,p)&&(l[p]=a[p]);l.originalType=e,l.mdxType="string"==typeof e?e:i,r[1]=l;for(var d=2;d<o;d++)r[d]=n[d];return t.createElement.apply(null,r)}return t.createElement.apply(null,n)}u.displayName="MDXCreateElement"},220:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>p,contentTitle:()=>r,default:()=>c,frontMatter:()=>o,metadata:()=>l,toc:()=>d});var t=n(7462),i=(n(7294),n(3905));const o={sidebar_position:5},r="Documenting Producers",l={unversionedId:"documenting-producers",id:"documenting-producers",title:"Documenting Producers",description:"Unlike consumers which are defined declaratively with an annotation, producers are defined imperatively, and there is no implementation uniform enough so that metadata can be picked up automatically.",source:"@site/docs/documenting-producers.md",sourceDirName:".",slug:"/documenting-producers",permalink:"/docs/documenting-producers",draft:!1,editUrl:"https://github.com/springwolf/springwolf.github.io/edit/master/docs/documenting-producers.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Documenting Consumers",permalink:"/docs/documenting-consumers"},next:{title:"Supported Protocols",permalink:"/docs/supported-protocols"}},p={},d=[{value:"Option 1: <code>@AsyncPublisher</code>",id:"option-1-asyncpublisher",level:2},{value:"Channel Name",id:"channel-name",level:3},{value:"Description",id:"description",level:3},{value:"Payload Type",id:"payload-type",level:3},{value:"Header",id:"header",level:3},{value:"<code>@AmqpAsyncOperationBinding</code>",id:"amqpasyncoperationbinding",level:3},{value:"<code>@KafkaAsyncOperationBinding</code>",id:"kafkaasyncoperationbinding",level:3},{value:"Option 2: <code>ProducerData</code>",id:"option-2-producerdata",level:2},{value:"Channel Name",id:"channel-name-1",level:3},{value:"Description",id:"description-1",level:3},{value:"Binding",id:"binding",level:3},{value:"Payload Type",id:"payload-type-1",level:3},{value:"Header",id:"header-1",level:3},{value:"<code>AmqpProducerData</code>",id:"amqpproducerdata",level:3},{value:"<code>KafkaProducerData</code>",id:"kafkaproducerdata",level:3},{value:"AMQP Parameters",id:"amqp-parameters",level:2},{value:"Queue Name (Channel Name)",id:"queue-name-channel-name",level:3},{value:"Description",id:"description-2",level:3},{value:"Exchange Name",id:"exchange-name",level:3},{value:"Routing Key",id:"routing-key",level:3},{value:"Payload Type",id:"payload-type-2",level:3},{value:"Kafka Parameters",id:"kafka-parameters",level:2},{value:"Topic Name (Channel Name)",id:"topic-name-channel-name",level:3},{value:"Description",id:"description-3",level:3},{value:"Payload Type",id:"payload-type-3",level:3},{value:"Headers",id:"headers",level:3},{value:"Examples",id:"examples",level:2}],s={toc:d};function c(e){let{components:a,...n}=e;return(0,i.kt)("wrapper",(0,t.Z)({},s,n,{components:a,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"documenting-producers"},"Documenting Producers"),(0,i.kt)("p",null,"Unlike consumers which are defined declaratively with an annotation, producers are defined imperatively, and there is no implementation uniform enough so that metadata can be picked up automatically."),(0,i.kt)("p",null,"Because producers are also an important part of Async APIs, Springwolf provides a way to explicitly add them to the generated document."),(0,i.kt)("p",null,"To document producers, either:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"add the ",(0,i.kt)("inlineCode",{parentName:"li"},"@AsyncPublisher")," annotation or"),(0,i.kt)("li",{parentName:"ul"},"declare the ",(0,i.kt)("inlineCode",{parentName:"li"},"ProducerData")," object as part of the ",(0,i.kt)("inlineCode",{parentName:"li"},"AsyncApiDocket"))),(0,i.kt)("p",null,"You are free to use all options together. Per channel and operation, first ",(0,i.kt)("inlineCode",{parentName:"p"},"ProducerData")," is used, then ",(0,i.kt)("inlineCode",{parentName:"p"},"@AsyncPublisher"),"."),(0,i.kt)("h2",{id:"option-1-asyncpublisher"},"Option 1: ",(0,i.kt)("inlineCode",{parentName:"h2"},"@AsyncPublisher")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"@AsyncPublisher")," annotation is added to the method of the publisher and extracts the payload from its arguments.\nAdditional fields can be documented."),(0,i.kt)("p",null,"The protocol operation binding is configured via ",(0,i.kt)("inlineCode",{parentName:"p"},"@AmqpAsyncOperationBinding")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"@KafkaAsyncOperationBinding"),", which has to be on the same method."),(0,i.kt)("p",null,"Below is an example to demonstrate the annotation:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'@AsyncPublisher(operation = @AsyncOperation(\n        channelName = "example-producer-topic",\n        description = "Optional. Customer uploaded an example payload",\n        headers = @AsyncOperation.Headers(\n                schemaName = "SpringKafkaDefaultHeaders",\n                values = {\n                        @AsyncOperation.Headers.Header(\n                                name = DEFAULT_CLASSID_FIELD_NAME,\n                                description = "Spring Type Id Header",\n                                value = "io.github.stavshamir.springwolf.example.dtos.ExamplePayloadDto"\n                        ),\n                }\n        )\n))\n@KafkaAsyncOperationBinding\npublic void sendMessage(ExamplePayloadDto msg) {\n    // send\n}\n')),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"Springwolf only finds methods that are within the ",(0,i.kt)("inlineCode",{parentName:"p"},"base-package"),".")),(0,i.kt)("h3",{id:"channel-name"},"Channel Name"),(0,i.kt)("p",null,"The channel name (or topic name in case of Kafka) - this is the name that will be used to publish messages to by the UI."),(0,i.kt)("h3",{id:"description"},"Description"),(0,i.kt)("p",null,"Optional. The description allows for human-friendly text to verbosely explain the ",(0,i.kt)("em",{parentName:"p"},"message"),", like specific domain, what the topic is used for and which data it contains."),(0,i.kt)("h3",{id:"payload-type"},"Payload Type"),(0,i.kt)("p",null,"The class object of the payload that will be published to this channel.\nIf not specified, it is extracted from the method arguments."),(0,i.kt)("h3",{id:"header"},"Header"),(0,i.kt)("p",null,"Optional. The headers describing the metadata of the payload."),(0,i.kt)("h3",{id:"amqpasyncoperationbinding"},(0,i.kt)("inlineCode",{parentName:"h3"},"@AmqpAsyncOperationBinding")),(0,i.kt)("p",null,"Associate this operation with amqp, see ",(0,i.kt)("a",{parentName:"p",href:"https://www.asyncapi.com/docs/reference/specification/v2.0.0#operationBindingsObject"},"operation-binding")," for details."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'@AmqpAsyncOperationBinding(cc = "example-topic-routing-key")\n')),(0,i.kt)("h3",{id:"kafkaasyncoperationbinding"},(0,i.kt)("inlineCode",{parentName:"h3"},"@KafkaAsyncOperationBinding")),(0,i.kt)("p",null,"Associate this operation with kafka, see ",(0,i.kt)("a",{parentName:"p",href:"https://www.asyncapi.com/docs/reference/specification/v2.0.0#operationBindingsObject"},"operation-binding")," for details."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'@KafkaAsyncOperationBinding(\n        bindingVersion = "1"\n)\n')),(0,i.kt)("h2",{id:"option-2-producerdata"},"Option 2: ",(0,i.kt)("inlineCode",{parentName:"h2"},"ProducerData")),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"Use specific ProducerData types ",(0,i.kt)("inlineCode",{parentName:"p"},"AmqpProducerData")," & ",(0,i.kt)("inlineCode",{parentName:"p"},"KafkaProducerData")," for protocol specific attributes")),(0,i.kt)("p",null,"Below is an example of describing a Kafka producer:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'@Bean\npublic AsyncApiDocket asyncApiDocket() {\n\n    ProducerData exampleProducerData = ProducerData.builder()\n            .channelName("example-producer-topic")\n            .description("Optional. Customer uploaded an example payload")\n            .operationBinding(ImmutableMap.of("kafka", new KafkaOperationBinding()))\n            .payloadType(ExamplePayloadDto.class)\n            .headers(AsyncHeaders.NOT_USED)\n            .build();\n  \n    return AsyncApiDocket.builder()\n            .basePackage(...)\n            .info(...)\n            .server(...)\n            .producer(exampleProducerData)\n            .build();\n}\n')),(0,i.kt)("p",null,"Multiple producers can be configured by calling the ",(0,i.kt)("inlineCode",{parentName:"p"},"producer()")," method multiple times."),(0,i.kt)("h3",{id:"channel-name-1"},"Channel Name"),(0,i.kt)("p",null,"The channel name (or topic name in case of Kafka) - this is the name that will be used to publish messages to by the UI."),(0,i.kt)("h3",{id:"description-1"},"Description"),(0,i.kt)("p",null,"Optional. The description allows for human-friendly text to verbosely explain the ",(0,i.kt)("em",{parentName:"p"},"message"),", like specific domain, what the topic is used for and which data it contains."),(0,i.kt)("h3",{id:"binding"},"Binding"),(0,i.kt)("p",null,"This property is used to discriminate the producer's protocol and provide protocol-specific properties (see ",(0,i.kt)("a",{parentName:"p",href:"https://www.asyncapi.com/docs/reference/specification/v2.0.0#operationBindingsObject"},"operation-binding"),"))."),(0,i.kt)("h3",{id:"payload-type-1"},"Payload Type"),(0,i.kt)("p",null,"The class object of the payload that will be published to this channel."),(0,i.kt)("h3",{id:"header-1"},"Header"),(0,i.kt)("p",null,"Optional. The headers describing the metadata of the payload.\nBy default, ",(0,i.kt)("inlineCode",{parentName:"p"},"AsyncHeaders.NOT_DOCUMENTED")," is used to indicate that no explicit header documentation exists.\nUse ",(0,i.kt)("inlineCode",{parentName:"p"},"AsyncHeaders")," to add your custom headers, use ",(0,i.kt)("inlineCode",{parentName:"p"},"AsyncHeaders.NOT_USED")," if you do not use headers and ",(0,i.kt)("inlineCode",{parentName:"p"},"AsyncHeadersForCloudEventsBuilder")," if your events follow the CloudEvent specification."),(0,i.kt)("h3",{id:"amqpproducerdata"},(0,i.kt)("inlineCode",{parentName:"h3"},"AmqpProducerData")),(0,i.kt)("p",null,"The above Kafka ",(0,i.kt)("inlineCode",{parentName:"p"},"ProducerData")," equivalent in ",(0,i.kt)("inlineCode",{parentName:"p"},"AmqpProducerData"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'    AmqpProducerData exampleProducer = AmqpProducerData.amqpProducerDataBuilder()\n        .queueName("example-producer-channel")\n        .description("example-producer-channel-description")\n        .exchangeName("example-topic-exchange")\n        .routingKey("example-topic-routing-key")\n        .payloadType(AnotherPayloadDto.class)\n        .build();\n')),(0,i.kt)("h3",{id:"kafkaproducerdata"},(0,i.kt)("inlineCode",{parentName:"h3"},"KafkaProducerData")),(0,i.kt)("p",null,"The above Kafka ",(0,i.kt)("inlineCode",{parentName:"p"},"ProducerData")," simplifies to the following ",(0,i.kt)("inlineCode",{parentName:"p"},"KafkaProducerData"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'    KafkaProducerData exampleProducerData = KafkaProducerData.kafkaProducerDataBuilder()\n        .topicName("example-producer-topic")\n        .description("Optional. Customer uploaded an example payload")\n        .payloadType(ExamplePayloadDto.class)\n        .headers(AsyncHeaders.NOT_USED)\n        .build();\n')),(0,i.kt)("h2",{id:"amqp-parameters"},"AMQP Parameters"),(0,i.kt)("h3",{id:"queue-name-channel-name"},"Queue Name (Channel Name)"),(0,i.kt)("p",null,"The queue name that will be used to publish messages to by the UI."),(0,i.kt)("h3",{id:"description-2"},"Description"),(0,i.kt)("p",null,"Optional. The description allows for human-friendly text to verbosely explain the ",(0,i.kt)("em",{parentName:"p"},"message"),", like specific domain, what the topic is used for and which data it contains."),(0,i.kt)("h3",{id:"exchange-name"},"Exchange Name"),(0,i.kt)("p",null,"The exchange name that will be used to bind queues to."),(0,i.kt)("h3",{id:"routing-key"},"Routing Key"),(0,i.kt)("p",null,"The routing key used when publishing a message."),(0,i.kt)("h3",{id:"payload-type-2"},"Payload Type"),(0,i.kt)("p",null,"The class object of the payload that will be published to this channel."),(0,i.kt)("h2",{id:"kafka-parameters"},"Kafka Parameters"),(0,i.kt)("h3",{id:"topic-name-channel-name"},"Topic Name (Channel Name)"),(0,i.kt)("p",null,"The topic name that will be used to publish messages to by the UI."),(0,i.kt)("h3",{id:"description-3"},"Description"),(0,i.kt)("p",null,"Optional. The description allows for human-friendly text to verbosely explain the ",(0,i.kt)("em",{parentName:"p"},"message"),", like specific domain, what the topic is used for and which data it contains."),(0,i.kt)("h3",{id:"payload-type-3"},"Payload Type"),(0,i.kt)("p",null,"The class object of the payload that will be published to this channel."),(0,i.kt)("h3",{id:"headers"},"Headers"),(0,i.kt)("p",null,"The Kafka headers describing the metadata of the payload, more details in the generic ProducerData."),(0,i.kt)("p",null,"The Springwolf Kafka plugin comes with a special ",(0,i.kt)("inlineCode",{parentName:"p"},"AsyncHeadersForSpringKafkaBuilder")," to document the ",(0,i.kt)("inlineCode",{parentName:"p"},"__TypeId__")," header of the spring-kafka dependency."),(0,i.kt)("h2",{id:"examples"},"Examples"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/springwolf/springwolf-core/blob/master/springwolf-examples/springwolf-amqp-example/src/main/java/io/github/stavshamir/springwolf/example/configuration/AsyncApiConfiguration.java"},"AMQP Example")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/springwolf/springwolf-core/blob/master/springwolf-examples/springwolf-cloud-stream-example/src/main/java/io/github/stavshamir/springwolf/example/configuration/AsyncApiConfiguration.java"},"Cloud Stream Example")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/springwolf/springwolf-core/blob/master/springwolf-examples/springwolf-kafka-example/src/main/java/io/github/stavshamir/springwolf/example/configuration/AsyncApiConfiguration.java"},"Kafka Example"))))}c.isMDXComponent=!0}}]);